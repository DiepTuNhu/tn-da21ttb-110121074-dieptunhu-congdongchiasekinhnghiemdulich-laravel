<?php

namespace App\Http\Controllers\Page;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\TravelType;
use App\Models\Destination;
use App\Models\Mission;
use App\Models\DestinationUtility;
use App\Models\Post;
use App\Models\Slide;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Auth;


class PageController extends Controller
{
    // public function index(){
    //     return view('user.index');
    // }
    public function index()
    {
        $slides = Slide::where('status', 0)
            ->orderBy('updated_at', 'desc')
            ->take(5)
            ->get();
        $posts = Post::where('status', 0)
            ->with(['user', 'destination', 'destination.destinationImages'])
            ->orderBy('updated_at', 'desc')
            ->paginate(8, ['*'], 'posts_page');
            
        $isLoggedIn = Auth::check();
        // L·∫•y t·∫•t c·∫£ c√°c lo·∫°i h√¨nh du l·ªãch t·ª´ b·∫£ng travel_types
        // L·∫•y t·∫•t c·∫£ c√°c ƒëi·ªÉm ƒë·∫øn t·ª´ b·∫£ng destination


        // $destinations = Destination::with(['destinationImages' => function ($query) {
        //     $query->where('status', 2);
        
        $destinations = Destination::where('status', 0)
            ->with(['destinationImages' => function ($query) {
            $query->where('status', 2);
        }])
            ->orderBy('updated_at', 'desc')
            ->paginate(8, ['*'], 'destinations_page'); // Ph√¢n trang b√†i vi·∫øt admin

        $isLoggedIn = Auth::check();
        // $travelTypes = TravelType::all();
        $travelTypes = TravelType::where('status', 0)->get();

        return view('user.index', compact('travelTypes', 'destinations', 'posts', 'isLoggedIn', 'slides'));
    }

    public function ajaxFilterPosts(Request $request)
    {
        $typeId = $request->get('type_id');

        $userPosts = Post::where('status', 0)
            ->with('destination')
            ->whereHas('destination', function ($query) use ($typeId) {
                $query->where('travel_type_id', $typeId);
            })
            ->orderBy('updated_at', 'desc')
            ->get();

        $adminPosts = Destination::where('status', 0)
            ->with('destinationImages')
            ->where('travel_type_id', $typeId)
            ->orderBy('updated_at', 'desc')
            ->get();

        // Render ri√™ng 2 ph·∫ßn HTML
        $userHtml = view('user.layout.partials.user_posts_list', [
            'posts' => $userPosts, // truy·ªÅn ƒë√∫ng t√™n bi·∫øn
        ])->render();

        $adminHtml = view('user.layout.partials.admin_posts_list', [
            'destinations' => $adminPosts // üëà Ph·∫£i ƒë√∫ng t√™n
        ])->render();
        return response()->json([
            'userHtml' => $userHtml,
            'adminHtml' => $adminHtml
        ]);
    }


    public function search(Request $request)
    {
        $keyword = $request->input('keyword');

        $destinations = Destination::query();
        if ($keyword) {
            $destinations->where(function($q) use ($keyword) {
                $q->where('name', 'like', "%$keyword%")
                  ->orWhereRaw("LOWER(TRIM(SUBSTRING_INDEX(address, ',', -1))) LIKE ?", ['%' . strtolower($keyword) . '%']);
            });
        }
        $destinations = $destinations
            ->with(['destinationImages' => function ($query) {
                $query->where('status', 2);
            }])
            ->orderBy('updated_at', 'desc')
            ->paginate(8, ['*'], 'destinations_page');

        $posts = Post::query()
            ->with(['user', 'destination', 'destination.destinationImages'])
            ->whereHas('destination', function ($q) use ($keyword) {
                if ($keyword) {
                    $q->where('name', 'like', "%$keyword%")
                      ->orWhereRaw("LOWER(TRIM(SUBSTRING_INDEX(address, ',', -1))) LIKE ?", ['%' . strtolower($keyword) . '%']);
                }
            })
            ->orderBy('updated_at', 'desc')
            ->paginate(8, ['*'], 'posts_page');

        $slides = Slide::where('status', 0)
            ->orderBy('updated_at', 'desc')
            ->take(5)
            ->get();
        $travelTypes = TravelType::where('status', 0)->get();

        // L·∫•y danh s√°ch t·ªânh/th√†nh t·ª´ address (unique)
        $provinces = Destination::selectRaw("TRIM(SUBSTRING_INDEX(address, ',', -1)) as province")
            ->distinct()
            ->pluck('province');

        return view('user.index', compact('travelTypes', 'destinations', 'posts', 'slides', 'provinces'));
    }

    public function getCommunity(Request $request)
    {
        // L·∫•y danh s√°ch lo·∫°i h√¨nh du l·ªãch
        $travelTypes = TravelType::where('status', 0)->get();

        // L·∫•y b·ªô l·ªçc t·ª´ request
        $travelTypeId = $request->get('type');
        $province = $request->get('province');
        $region = $request->get('region'); // L·∫•y mi·ªÅn t·ª´ request

        // Truy v·∫•n c∆° b·∫£n: ch·ªâ l·∫•y nh·ªØng ƒë·ªãa ƒëi·ªÉm c√≤n ho·∫°t ƒë·ªông
        $query = Destination::where('status', '!=', 1);

        // L·ªçc theo lo·∫°i h√¨nh du l·ªãch n·∫øu c√≥
        if ($travelTypeId) {
            $query->where('travel_type_id', $travelTypeId);
        }

        // L·ªçc theo t·ªânh n·∫øu c√≥
        if ($province) {
            $query->where('address', 'LIKE', "%$province%");
        }

        // L·ªçc theo mi·ªÅn n·∫øu c√≥
        if ($region) {
            $provincesInRegion = $this->getProvincesByRegion($region); // H√†m l·∫•y danh s√°ch t·ªânh theo mi·ªÅn
            $query->where(function ($q) use ($provincesInRegion) {
                foreach ($provincesInRegion as $province) {
                    $q->orWhere('address', 'LIKE', "%$province%");
                }
            });
        }

        // L·∫•y d·ªØ li·ªáu sau khi ƒë√£ √°p d·ª•ng b·ªô l·ªçc
        $destinations = $query->get();

        // G·∫Øn h√¨nh ·∫£nh ch√≠nh cho t·ª´ng ƒë·ªãa ƒëi·ªÉm
        foreach ($destinations as $destination) {
            $destination->mainImage = $destination->destinationImages()->where('status', 2)->first();
        }

        // L·∫•y danh s√°ch b√†i vi·∫øt m·ªõi nh·∫•t
        $posts = Post::where('status', 0)
            ->with(['user', 'destination', 'destination.destinationImages'])
            ->orderBy('updated_at', 'desc')
            ->get();

        // Tr·∫£ v·ªÅ view c√πng v·ªõi d·ªØ li·ªáu ƒë√£ l·ªçc
        return view('user.layout.community', compact(
            'destinations',
            'travelTypes',
            'travelTypeId',
            'province',
            'region',
            'posts'
        ));
    }

    // H√†m tr·∫£ v·ªÅ danh s√°ch t·ªânh theo mi·ªÅn
    private function getProvincesByRegion($region)
    {
        $regions = [
            'B·∫Øc' => ['H√† N·ªôi', 'H·∫£i Ph√≤ng', 'Qu·∫£ng Ninh', 'B·∫Øc Ninh', 'B·∫Øc Giang', 'H√† Nam', 'H·∫£i D∆∞∆°ng', 'H√≤a B√¨nh', 'H∆∞ng Y√™n', 'L·∫°ng S∆°n', 'Nam ƒê·ªãnh', 'Ninh B√¨nh', 'Ph√∫ Th·ªç', 'S∆°n La', 'Th√°i B√¨nh', 'Th√°i Nguy√™n', 'Tuy√™n Quang', 'Vƒ©nh Ph√∫c', 'Y√™n B√°i', 'Cao B·∫±ng', 'B·∫Øc K·∫°n', 'ƒêi·ªán Bi√™n', 'H√† Giang', 'Lai Ch√¢u', 'L√†o Cai'],
            'Trung' => ['Thanh H√≥a', 'Ngh·ªá An', 'H√† Tƒ©nh', 'Qu·∫£ng B√¨nh', 'Qu·∫£ng Tr·ªã', 'Th·ª´a Thi√™n Hu·∫ø', 'ƒê√† N·∫µng', 'Qu·∫£ng Nam', 'Qu·∫£ng Ng√£i', 'B√¨nh ƒê·ªãnh', 'Ph√∫ Y√™n', 'Kh√°nh H√≤a', 'Ninh Thu·∫≠n', 'B√¨nh Thu·∫≠n', 'Kon Tum', 'Gia Lai', 'ƒê·∫Øk L·∫Øk', 'ƒê·∫Øk N√¥ng', 'L√¢m ƒê·ªìng'],
            'Nam' => ['TP H·ªì Ch√≠ Minh', 'B√¨nh D∆∞∆°ng', 'B√¨nh Ph∆∞·ªõc', 'T√¢y Ninh', 'ƒê·ªìng Nai', 'B√† R·ªãa - V≈©ng T√†u', 'Long An', 'Ti·ªÅn Giang', 'B·∫øn Tre', 'Tr√† Vinh', 'Vƒ©nh Long', 'ƒê·ªìng Th√°p', 'An Giang', 'C·∫ßn Th∆°', 'H·∫≠u Giang', 'Ki√™n Giang', 'S√≥c TrƒÉng', 'B·∫°c Li√™u', 'C√† Mau']
        ];

        return $regions[$region] ?? [];
    }

    public function getExplore (Request $request)
    {
        // L·∫•y danh s√°ch lo·∫°i h√¨nh du l·ªãch
        $travelTypes = TravelType::where('status', 0)->get();

        // L·∫•y b·ªô l·ªçc t·ª´ request
        $travelTypeId = $request->get('type');
        $province = $request->get('province');
        $region = $request->get('region'); // L·∫•y mi·ªÅn t·ª´ request

        // Truy v·∫•n c∆° b·∫£n: ch·ªâ l·∫•y nh·ªØng ƒë·ªãa ƒëi·ªÉm c√≤n ho·∫°t ƒë·ªông
        $query = Destination::where('status', '!=', 1);

        // L·ªçc theo lo·∫°i h√¨nh du l·ªãch n·∫øu c√≥
        if ($travelTypeId) {
            $query->where('travel_type_id', $travelTypeId);
        }

        // L·ªçc theo t·ªânh n·∫øu c√≥
        if ($province) {
            $query->where('address', 'LIKE', "%$province%");
        }

        // L·ªçc theo mi·ªÅn n·∫øu c√≥
        if ($region) {
            $provincesInRegion = $this->getProvincesByRegion($region); // H√†m l·∫•y danh s√°ch t·ªânh theo mi·ªÅn
            $query->where(function ($q) use ($provincesInRegion) {
                foreach ($provincesInRegion as $province) {
                    $q->orWhere('address', 'LIKE', "%$province%");
                }
            });
        }

        // L·∫•y d·ªØ li·ªáu sau khi ƒë√£ √°p d·ª•ng b·ªô l·ªçc
        $destinations = $query->get();

        // G·∫Øn h√¨nh ·∫£nh ch√≠nh cho t·ª´ng ƒë·ªãa ƒëi·ªÉm
        foreach ($destinations as $destination) {
            $destination->mainImage = $destination->destinationImages()->where('status', 2)->first();
        }

        // Tr·∫£ v·ªÅ view c√πng v·ªõi d·ªØ li·ªáu ƒë√£ l·ªçc
        return view('user.layout.explore', compact('destinations', 'travelTypes', 'travelTypeId', 'province', 'region'));
    }


    public function getMission(Request $request)
    {
        // L·∫•y danh s√°ch nhi·ªám v·ª• c√≥ tr·∫°ng th√°i ho·∫°t ƒë·ªông
        $missions = Mission::all();

        // Tr·∫£ v·ªÅ view c√πng v·ªõi danh s√°ch nhi·ªám v·ª•
        return view('user.layout.mission', compact('missions'));
    }

    public function getRanking(Request $request)
    {
        // Tr·∫£ v·ªÅ view c√πng v·ªõi danh s√°ch nhi·ªám v·ª•
        return view('user.layout.ranking');
    }
    public function getProfile(Request $request)
    {
        // Tr·∫£ v·ªÅ view c√πng v·ªõi danh s√°ch nhi·ªám v·ª•
        return view('user.layout.profile');
    }

    public function getDetailDestination(Request $request, $id)
    {
        // L·∫•y th√¥ng tin ƒë·ªãa ƒëi·ªÉm
        $destination = Destination::with(['destinationImages' => function ($query) {
            $query->whereIn('status', [0, 2]); // L·∫•y ·∫£nh c√≥ status = 0 ho·∫∑c 2
        }])->findOrFail($id);

        // Ph√¢n lo·∫°i ·∫£nh ch√≠nh v√† ·∫£nh ph·ª•
        $mainImage = $destination->destinationImages->firstWhere('status', 2); // ·∫¢nh ch√≠nh
        $subImages = $destination->destinationImages->reject(function ($image) {
            return $image->status == 1; // Lo·∫°i b·ªè ·∫£nh c√≥ status = 1
        });

        // L·∫•y danh s√°ch ti·ªán √≠ch g·∫ßn ƒë·ªãa ƒëi·ªÉm
        $nearbyUtilities = DestinationUtility::where('destination_id', $id)
            ->where('distance', '<=', 5) // Ch·ªâ l·∫•y ti·ªán √≠ch trong b√°n k√≠nh 5km
            ->with('utility') // L·∫•y th√¥ng tin ti·ªán √≠ch qua quan h·ªá
            ->get();

        // L·∫•y API Key t·ª´ file .env
        $googleMapsApiKey = env('GOOGLE_MAPS_API_KEY');

        // T·∫°o URL Google Maps
        $mapUrl = "https://www.google.com/maps/embed/v1/place?key={$googleMapsApiKey}&q=" . urlencode($destination->name . ', ' . $destination->address);
    // Ph√¢n lo·∫°i ti·ªán √≠ch theo lo·∫°i
        $foodUtilities = $nearbyUtilities->filter(function ($utility) {
            return $utility->utility->utility_types->name === '·∫®m th·ª±c'; // So s√°nh theo t√™n lo·∫°i
        });

        $stayUtilities = $nearbyUtilities->filter(function ($utility) {
            return $utility->utility->utility_types->name === 'L∆∞u tr√∫'; // So s√°nh theo t√™n lo·∫°i
        });
        // Tr·∫£ v·ªÅ view c√πng v·ªõi d·ªØ li·ªáu
        return view('user.layout.detail_destination', compact('destination', 'mainImage', 'subImages', 'mapUrl', 'foodUtilities', 'stayUtilities'));
    }

    public function showDestination($id)
    {
        // L·∫•y th√¥ng tin ƒë·ªãa ƒëi·ªÉm
        $destination = Destination::findOrFail($id);

        // L·∫•y danh s√°ch ti·ªán √≠ch g·∫ßn ƒë·ªãa ƒëi·ªÉm
        $nearbyUtilities = DestinationUtility::where('destination_id', $id)
            ->where('distance', '<=', 5) // Ch·ªâ l·∫•y ti·ªán √≠ch trong b√°n k√≠nh 5km
            ->with('utility') // L·∫•y th√¥ng tin ti·ªán √≠ch qua quan h·ªá
            ->get();

        // Truy·ªÅn d·ªØ li·ªáu sang view
        return view('user.layout.detail_destination', compact('destination', 'nearbyUtilities'));
    }
}
