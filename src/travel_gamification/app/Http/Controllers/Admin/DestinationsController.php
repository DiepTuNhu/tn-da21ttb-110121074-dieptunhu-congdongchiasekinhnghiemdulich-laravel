<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Destination;
use App\Models\TravelType;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Http;
use App\Helpers\GeoHelper;
use App\Models\Utility;
use App\Models\DestinationUtility;
use App\Services\DistanceService;

class DestinationsController extends Controller
{
    public function index()
    {
        $destinations = Destination::all();
        // return view('admin.destination.list',compact('destinations'));

        if (request()->ajax()) {
            // N·∫øu l√† request AJAX, ch·ªâ tr·∫£ ph·∫ßn n·ªôi dung @section('content')
            return view('admin.destination.list', compact('destinations'))->render();
        }
    
        // N·∫øu l√† request b√¨nh th∆∞·ªùng, tr·∫£ to√†n b·ªô layout
        return view('admin.destination.list', compact('destinations'));
    
    }

    public function create()
    {
        $travel_types = TravelType::all(); // L·∫•y danh s√°ch c√°c lo·∫°i h√¨nh

        return view('admin.destination.add', compact('travel_types',));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request, DistanceService $distanceService)
    {
        $this->validate($request, [
            'name' => 'required|string|max:255|unique:destinations,name',
            'price' => 'required|string|max:255',
            'id_type' => 'required|exists:travel_types,id', // Ki·ªÉm tra id c√≥ t·ªìn t·∫°i trong b·∫£ng types
            'tinh' => 'required', // T·ªânh
            'quan' => 'required', // Huy·ªán
            'phuong' => 'required', // X√£
            'highlights' => 'nullable|string',
            'best_time' => 'nullable|string',
            'local_cuisine' => 'nullable|string',
            'transportation' => 'nullable|string',
        ], [
            'name.required' => 'B·∫°n ch∆∞a nh·∫≠p t√™n.',
            'name.unique' => 'T√™n ƒë·ªãa ƒëi·ªÉm ƒë√£ t·ªìn t·∫°i.',
            'price.required' => 'B·∫°n ch∆∞a nh·∫≠p gi√°.',
            'id_type.required' => 'B·∫°n ch∆∞a ch·ªçn lo·∫°i h√¨nh.',
            'tinh.required' => 'B·∫°n ch∆∞a ch·ªçn t·ªânh.',
            'quan.required' => 'B·∫°n ch∆∞a ch·ªçn huy·ªán.',
            'phuong.required' => 'B·∫°n ch∆∞a ch·ªçn x√£.',
        ]);

        // H√†m l·∫•y t√™n t·ª´ API Esgoo
        function getNameFromEsgoo($level, $parentId, $targetId)
        {
            $response = Http::get("https://esgoo.net/api-tinhthanh/{$level}/{$parentId}.htm");
            $data = $response->json()['data'] ?? [];

            foreach ($data as $item) {
                if ((int)$item['id'] === (int)$targetId) {
                    return $item['full_name'];
                }
            }

            return null;
        }

        // L·∫•y t√™n t·ªânh, huy·ªán, x√£ b·∫±ng c√°ch t√¨m theo ID
        $province = getNameFromEsgoo(1, 0, $request->tinh);
        $district = getNameFromEsgoo(2, $request->tinh, $request->quan);
        $ward = getNameFromEsgoo(3, $request->quan, $request->phuong);

        // Ki·ªÉm tra n·∫øu kh√¥ng t√¨m th·∫•y t√™n
        if (!$province || !$district || !$ward) {
            return redirect()->back()->withErrors(['error' => 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ƒë·ªãa ch·ªâ t·ª´ API.']);
        }

        // N·ªëi ƒë·ªãa ch·ªâ theo th·ª© t·ª± x√£, huy·ªán, t·ªânh
        $address = trim("{$ward}, {$district}, {$province}");

        // N·ªëi t√™n ƒë·ªãa ƒëi·ªÉm v·ªõi ƒë·ªãa ch·ªâ
        $fullAddress = trim("{$request->name}, {$address}");

        // L·∫•y t·ªça ƒë·ªô t·ª´ OpenCage Geocoding API
        $apiKey = env('OPENCAGE_API_KEY'); // L·∫•y API Key t·ª´ file config
        $response = Http::get("https://api.opencagedata.com/geocode/v1/json", [
            'q' => $fullAddress, // ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß
            'key' => $apiKey,
            'language' => 'vi', // Ng√¥n ng·ªØ (vi: ti·∫øng Vi·ªát)
            'pretty' => 1, // T√πy ch·ªçn ƒë·ªÉ d·ªÖ ƒë·ªçc (kh√¥ng b·∫Øt bu·ªôc)
        ]);

        // Ghi log to√†n b·ªô k·∫øt qu·∫£ tr·∫£ v·ªÅ ƒë·ªÉ ki·ªÉm tra n·∫øu c√≥ l·ªói
        logger()->info('üìç ƒê·ªãa ch·ªâ g·ª≠i l√™n OpenCage: ' . $fullAddress);
        logger()->info('üì¶ OpenCage API response: ', $response->json());

        // Ki·ªÉm tra n·∫øu kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£
        if (empty($response->json()['results'])) {
            logger()->error('‚ùå Kh√¥ng t√¨m th·∫•y t·ªça ƒë·ªô cho ƒë·ªãa ch·ªâ: ' . $fullAddress);
            $location = null;
        } else {
            $location = $response->json()['results'][0]['geometry'] ?? null;
        }

        // T·∫°o m·ªõi Destination
        $destination = new Destination();
        $destination->name = $request->name;
        $destination->price = $request->price;
        $destination->travel_type_id = $request->id_type;
        $destination->address = $address;
        $destination->latitude = $location['lat'] ?? null; // L∆∞u t·ªça ƒë·ªô latitude t·ª´ API
        $destination->longitude = $location['lng'] ?? null; // L∆∞u t·ªça ƒë·ªô longitude t·ª´ API
        $destination->status = 0;
        $destination->highlights = $request->highlights;
        $destination->best_time = $request->best_time;
        $destination->local_cuisine = $request->local_cuisine;
        $destination->transportation = $request->transportation;
        $destination->user_id = auth()->id();
        $destination->save();

        // T√≠nh kho·∫£ng c√°ch v√† l∆∞u v√†o b·∫£ng trung gian
        $distanceService->calculateAndSaveDistances(
            $destination->latitude,
            $destination->longitude,
            'destination',
            $destination->id
        );

        return redirect()->route('destinations.index')->with('success', 'ƒê·ªãa ƒëi·ªÉm ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng.');
    }
    
    /**
     * Display the specified resource.
     */
    public function show($id)
    {
        $destination = Destination::findOrFail($id);

        // L·∫•y danh s√°ch ti·ªán √≠ch g·∫ßn ƒë·ªãa ƒëi·ªÉm
        $nearbyUtilities = DestinationUtility::where('destination_id', $id)
            ->where('distance', '<=', 20) // Ch·ªâ l·∫•y ti·ªán √≠ch trong b√°n k√≠nh 5km
            ->with('utility') // L·∫•y th√¥ng tin ti·ªán √≠ch qua quan h·ªá
            ->get();

        return view('user.layout.detail_destination', compact('destination', 'nearbyUtilities'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        $destination = Destination::find($id);
        $travel_types = TravelType::all(); 

        // T√°ch ƒë·ªãa ch·ªâ th√†nh x√£, huy·ªán, t·ªânh
        $addressParts = explode(', ', $destination->address);
        $phuong = $addressParts[0] ?? ''; // X√£
        $quan = $addressParts[1] ?? '';   // Huy·ªán
        $tinh = $addressParts[2] ?? '';   // T·ªânh
    return view('admin.destination.edit', compact('destination', 'travel_types', 'tinh', 'quan', 'phuong'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        $request->validate([
            'name' => 'required|string|max:255|unique:destinations,name,' . $id,
            'price' => 'required|string|max:255',
            'id_type' => 'required|exists:travel_types,id', // Ki·ªÉm tra id c√≥ t·ªìn t·∫°i trong b·∫£ng types
            'highlights' => 'nullable|string',
            'best_time' => 'nullable|string',
            'local_cuisine' => 'nullable|string',
            'transportation' => 'nullable|string',
        ], [
            'name.required' => 'B·∫°n ch∆∞a nh·∫≠p t√™n.',
            'name.unique' => 'T√™n ƒë·ªãa ƒëi·ªÉm ƒë√£ t·ªìn t·∫°i.',
            'price.required' => 'B·∫°n ch∆∞a nh·∫≠p gi√°.',
            'id_type.required' => 'B·∫°n ch∆∞a ch·ªçn lo·∫°i h√¨nh.',
        ]);

        $destination = Destination::find($id);

        if (!$destination) {
            return redirect()->route('utilities.index')->with('error', 'destination not found!');
        }

        // T·∫°o ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß t·ª´ request
        $address = trim(($request->phuong_text ?? '') . ', ' . ($request->quan_text ?? '') . ', ' . ($request->tinh_text ?? ''));
        $fullAddress = trim(($request->name ?? '') . ', ' . $address);

        // G·ªçi OpenCage Geocoding API ƒë·ªÉ l·∫•y t·ªça ƒë·ªô
        $apiKey = env('OPENCAGE_API_KEY'); // L·∫•y API Key t·ª´ file .env
        $response = Http::get("https://api.opencagedata.com/geocode/v1/json", [
            'q' => $fullAddress, // ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß
            'key' => $apiKey,
            'language' => 'vi', // Ng√¥n ng·ªØ (vi: ti·∫øng Vi·ªát)
            'pretty' => 1, // T√πy ch·ªçn ƒë·ªÉ d·ªÖ ƒë·ªçc (kh√¥ng b·∫Øt bu·ªôc)
        ]);

        // Ghi log to√†n b·ªô k·∫øt qu·∫£ tr·∫£ v·ªÅ ƒë·ªÉ ki·ªÉm tra n·∫øu c√≥ l·ªói
        logger()->info('üìç ƒê·ªãa ch·ªâ g·ª≠i l√™n OpenCage: ' . $fullAddress);
        logger()->info('üì¶ OpenCage API response: ', $response->json());

        // Ki·ªÉm tra n·∫øu kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£
        if (empty($response->json()['results'])) {
            logger()->error('‚ùå Kh√¥ng t√¨m th·∫•y t·ªça ƒë·ªô cho ƒë·ªãa ch·ªâ: ' . $fullAddress);
            $location = null;
        } else {
            $location = $response->json()['results'][0]['geometry'] ?? null;
        }

        // Ki·ªÉm tra v√† x√≥a ·∫£nh c≈© n·∫øu c√≥
        if ($destination->image && $request->hasFile('image1') && $destination->image !== 'default.jpg') {
            Storage::delete('public/destination_image/' . $destination->image);
        }

        // C·∫≠p nh·∫≠t th√¥ng tin ƒë·ªãa ƒëi·ªÉm
        $destination->address = $address ?: null; // N·∫øu ƒë·ªãa ch·ªâ r·ªóng, g√°n null
        $destination->name = $request->name ?: null; // N·∫øu t√™n r·ªóng, g√°n null
        $destination->price = $request->price ?: null; // N·∫øu gi√° r·ªóng, g√°n null
        $destination->latitude = $location['lat'] ?? null; // L∆∞u t·ªça ƒë·ªô latitude t·ª´ API
        $destination->longitude = $location['lng'] ?? null; // L∆∞u t·ªça ƒë·ªô longitude t·ª´ API
        $destination->highlights = $request->highlights ?: null;
        $destination->best_time = $request->best_time ?: null;
        $destination->local_cuisine = $request->local_cuisine ?: null;
        $destination->transportation = $request->transportation ?: null;
        $destination->travel_type_id = $request->id_type ?: null;
        $destination->status = $request->has('status') ? $request->status : $destination->status;

        $destination->save();

        // T√≠nh l·∫°i kho·∫£ng c√°ch v√† l∆∞u v√†o b·∫£ng trung gian n·∫øu c√≥ thay ƒë·ªïi v·ªã tr√≠
        app(\App\Services\DistanceService::class)->calculateAndSaveDistances(
            $destination->latitude,
            $destination->longitude,
            'destination',
            $destination->id
        );

        return redirect()->route('destinations.index')->with('success', 'ƒê·ªãa ƒëi·ªÉm ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        // T√¨m ng∆∞·ªùi d√πng theo ID
        $destination = Destination::find($id);


        // X√≥a ng∆∞·ªùi d√πng
        $destination->delete();

        // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang danh s√°ch ng∆∞·ªùi d√πng
        return redirect()->route('destinations.index');
    }
}
